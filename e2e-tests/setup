#!/bin/bash

set -e -u

TB=./toobig

# A comment... but the comment ends up in the script output.
X##() {
    PURPLE='\033[0;36m'
    NC='\033[0m' # No Color
    echo
    echo -e "$PURPLE$1$NC"
}

rf() {
    FILE=$1
    shift
    echo "$@ >$FILE"
    "$@" >$FILE
}

rx() {
    echo "$@"
    "$@"
}

# Run quiet
runq() {
    echo "$TB $@ >/dev/null"
    GOCOVERDIR=$PWD/gocov-datafiles $TB "$@" >/dev/null
}

# Normally we use this to verify we are getting an exit code of 1
# This protects us from hiding problems like a panic (exit 2).
run() {
    expected=$1
    exit_code=0
    shift
    echo
    echo "$TB --update-is-error $@"
    GOCOVERDIR=$PWD/gocov-datafiles \
        $TB --update-is-error "$@" || exit_code=$?

    if [ $exit_code -ne $expected ]; then
        CLR='\033[0;31m' # RED
        NC='\033[0m'     # No Color
        echo -e "${CLR}Test failed${NC} with error code: $exit_code, expected $expected."
        echo
        exit 1
    else
        CLR='\033[0;32m' # GREEN
        NC='\033[0m'     # No Color
        echo -e "${CLR}Test passed${NC} with error code: $exit_code"
        echo
    fi
}

validate() {
    X## "Restore files..."
    rm -fr x/files-validate
    mkdir x/files-validate
    run 0 restore --file-path=$PWD/x/files-validate $CFG
    X## "Validating data with diff"
    echo diff -r x/files x/files-validate
    echo "-------------------------------"
    set +e
    diff -r x/files x/files-validate
    RV=$?
    set -e
    echo "-------------------------------"
    if [ $# -eq 0 ]; then
        EXP=0
    else
        EXP=$1
    fi
    if [ $RV -eq $EXP ]; then
        echo "Success: diff returned $RV"
    else
        echo "Failed: data returned $RV, expected $EXP"
        exit 1
    fi
}

# Some basic initialization of our environment.
rm -fr x
mkdir x
mkdir x/{files,blobs,refs,old}

CFG="x/update.cfg"
cat <<EOF >$CFG
{
"file-path": "files",
"ref-path": "refs",
"blob-path": "blobs",
"old-path": "old"
}
EOF
